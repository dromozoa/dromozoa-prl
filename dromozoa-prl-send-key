#! /usr/bin/env lua

-- Copyright (C) 2015,2016 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-prl.
--
-- dromozoa-prl is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-prl is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-prl.  If not, see <http://www.gnu.org/licenses/>.

local read_file = require "dromozoa.commons.read_file"
local unix = require "dromozoa.unix"
local prl = require "dromozoa.prl"

local name, filename = assert(...)

local text
if filename == nil then
  text = io.read("*a")
else
  text = assert(read_file(filename))
end

local key_to_char = {
  ESCAPE = string.char(0x1b);
  MINUS = "-";
  EQUAL = "=";
  BACKSPACE = "\b";
  TAB = "\t";
  LEFT_BRACKET = "[";
  RIGHT_BRACKET = "]";
  ENTER = "\n";
  SEMICOLON = ";";
  QUOTE = "'";
  TILDA = "`";
  BACKSLASH = "\\";
  COMMA = ",";
  DOT = ".";
  SLASH = "/";
  SPACE = " ";
};

local key_to_char_capital = {
  ["1"] = "!";
  ["2"] = "@";
  ["3"] = "#";
  ["4"] = "$";
  ["5"] = "%";
  ["6"] = "^";
  ["7"] = "&";
  ["8"] = "*";
  ["9"] = "(";
  ["0"] = ")";
  MINUS = "_";
  EQUAL = "+";
  LEFT_BRACKET = "{";
  RIGHT_BRACKET = "}";
  SEMICOLON = ":";
  QUOTE = "\"";
  TILDA = "~";
  BACKSLASH = "|";
  COMMA = "<";
  DOT = ">";
  SLASH = "?";
}

local n = ("0"):byte()
for i = 0, 9 do
  local byte = i + n
  local char = string.char(byte)
  key_to_char[char] = char
end

local n = ("A"):byte()
for i = 0, 25 do
  local byte = i + n
  local char = string.char(byte)
  key_to_char[char] = char:lower()
  key_to_char_capital[char] = char
end

local char_to_key = {}
for key, char in pairs(key_to_char) do
  char_to_key[char] = { key }
end
for key, char in pairs(key_to_char_capital) do
  char_to_key[char] = { key, true }
end

assert(prl.sdk_wrap.load_lib_from_std_paths())
assert(prl.init_ex())

do
  local server = assert(prl.server.create())

  local job = assert(server:login_local())
  assert(job:wait())
  assert(job:get_ret_code() == "PRL_ERR_SUCCESS")
  assert(job:free())

  local job = assert(server:get_vm_list())
  assert(job:wait())
  assert(job:get_ret_code() == "PRL_ERR_SUCCESS")
  local vm_list = assert(job:get_result())
  assert(job:free())

  for i = 1, vm_list:get_params_count() do
    local vm = assert(vm_list:get_param_by_index(i))
    local vm_config = assert(vm:get_config())

    if assert(vm_config:get_name()) == name then
      local job = assert(vm:connect_to_vm())
      assert(job:wait())
      assert(job:get_ret_code() == "PRL_ERR_SUCCESS")
      assert(job:free())

      for i = 1, #text do
        local c = text:sub(i, i)
        local keys = char_to_key[c]
        local key, shift = keys[1], keys[2]
        if shift then
          assert(vm:send_key_event_ex(prl.key.LEFT_SHIFT, prl.PKE_PRESS))
          assert(vm:send_key_pressed_and_released(prl.key[keys[1]]))
          assert(vm:send_key_event_ex(prl.key.LEFT_SHIFT, prl.PKE_RELEASE))
        else
          assert(vm:send_key_pressed_and_released(prl.key[keys[1]]))
        end
        assert(unix.nanosleep(0.1))
      end

      assert(vm:disconnect_from_vm())
    end

    assert(vm_config:free())
    assert(vm:free())
  end

  assert(vm_list:free())

  local job = assert(server:logoff())
  assert(job:wait())
  assert(job:get_ret_code() == "PRL_ERR_SUCCESS")
  assert(job:free())

  assert(server:free())
end

assert(prl.deinit())
assert(prl.sdk_wrap.unload())
